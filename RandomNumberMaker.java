import java.util.Random;


public class RandomNumberMaker {
	
	//centralized Random Number Generator?
	private long startSeed;
	private Random rng;
	private double last;
	private int period = WorldState.streamNumber * 123456;
	private double next =  -1;
	
    /**
     * Default constructor to initialize the random number generator
	 *
     * @param sow the seed to start the random number generation
     */
	public RandomNumberMaker(long seed, int streamNumber)
	{	
		startSeed = seed;
		last = seed;
		
		for(int i = 0; i < streamNumber * period; i++)
		{//calculate a seed variant for the appropriate stream using an lcg function
			last = lcg(last);
		}
		//seed the random number generator with the generated seed
		rng = new Random((long) last);
	}//end constructor
	
	public RandomNumberMaker()
	{
		rng = new Random();
		last = rng.nextDouble();
	}
	
	public synchronized double lcg(double last)
	{//take the input number and find the next iteration of it
		return (Math.pow(7,5) * last) % (Math.pow(2,31) - 1);
	}
	
    /**
     * Generates a pseudo-random double
	 *
     * @return double returns a pseudo-random double number
     */
	public synchronized double rDouble()
	{//generates a pseudo-random double
		last = rng.nextDouble();
		return last;
	}

    /**
     * Returns the last generated double
	 *
     * @return double returns the last generated double
     */
	public synchronized double getLast()
	{//returns the last number generated by the RandomNumberGenerator
		//mainly for testing
		return last;
	}
	
    /**
     * Generates a pseudo-random int
	 *
     * @return int returns a pseudo-random int number
     */
	public synchronized int rInt()
	{//returns a random int from the maker
		int x = rng.nextInt();
		if (x < 0) x *= -1;
		//last = (double) x;
		return x;
	}
	
	public synchronized int rInt(int bound)
	{
		int x = rng.nextInt(bound);
		return x;
	}
	
}
